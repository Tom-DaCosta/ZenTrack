services:
  influxdb:
    image: influxdb:2.7
    container_name: influxdb_container
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
          test: ["CMD", "curl", "http://localhost:8086/health"]
          interval: 10s
          timeout: 5s
          retries: 3
    networks:
      default:
        name: acme_network

    
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana_container
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USERNAME}
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
  #   depends_on:
  #     - influxdb
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  # in_acme:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: in_acme_container
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - influxdb
  #     - grafana
  #   healthcheck:
  #     test: ["CMD", "curl", "http://localhost:8080/health"]
  #     interval: 5s
  #     timeout: 2s
  #     retries: 3
  # flat_script:
  #   build:
  #     context: .
  #     dockerfile: Scripts/Flat/Dockerfile
  #   container_name: flat_script_container
  #   volumes:
  #     - ./Scripts/Flat/script.py:/app/script.py 
  #     - ./Scripts/Flat/requirements.txt:/requirements.txt
  #   ports:
  #     - "5000:5000"
  #   command: ["sh", "-c", "pip install -r requirements.txt && python /app/script.py"]
  #   depends_on:
  #     - in_acme
  #   healthcheck:
  #     test: ["CMD", "curl", "-X", "POST", "http://127.0.0.1:5000/notification"]
  #     interval: 30s
  #     timeout: 2s
  #     retries: 3
  # acme_builder:
  #   build:
  #     context: .
  #     dockerfile: Build/CNT/Dockerfile
  #   container_name: acme_builder_container
  #   depends_on:
  #     in_acme:
  #       condition: service_healthy  
  #     flat_script:
  #       condition: service_healthy
# volumes:
#   influxdb_data:
#   grafana_data:

